#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'i18n/utils'
require 'active_support/core_ext/hash/deep_merge'
require 'active_support/core_ext/hash/keys'

def flatten_hash(hash, keys=[], result = {})
  if hash.is_a? Hash
    hash.each do |key, value|
      flatten_hash(value, keys + [key], result)
    end
  else
    result[keys] = hash
  end

  result
end

if File.exist?("config/missing_translations.yml")
  missing_translation_hash = YAML.load_file("config/missing_translations.yml")
  raise "Missing translations not YAML" unless missing_translation_hash.kind_of?(Hash)

  missing_translation_hash&.each do |locale, locale_translations|
    master_language = YAML.load_file("config/locales/#{locale}.yml")
    missing_translations = { "#{locale}": locale_translations }.deep_stringify_keys

    if ARGV[0] and ARGV[0].strip == "--unused"
      unused_translations = YAML.load_file("config/#{locale}.unused.yml")
      flat_missing_translations = flatten_hash(missing_translations)
      flat_unused_translations = flatten_hash(unused_translations)

      found_translations = {}

      flat_missing_translations.each do |scope, _|
        while scope.length >= 2
          if flat_unused_translations[scope]
            found_translations[scope] = flat_unused_translations[scope]
            break
          else
            key = scope.pop
            scope.pop
            scope << key
          end
        end
      end

      missing_translations = {}
      found_translations.each do |key, value|
        hash = value
        key.reverse.each { |key| hash = { key => hash } }
        missing_translations = missing_translations.deep_merge(hash)
      end
    end

    proc = Proc.new { |k, v|
      if v.kind_of?(Hash)
        v.delete_if(&proc)
        v.empty?
      else
        v.nil? or (v.respond_to?(:empty?) and v.empty?)
      end
    }

    missing_translations.delete_if(&proc)
    missing_translations.deep_merge!(master_language)

    proc = Proc.new do |v|
      if v.kind_of?(Hash)
        v.transform_keys(&:to_s).sort_by {|key, _| key }.to_h.transform_values(&proc)
      else
        v
      end
    end

    result_string = ""
    missing_translations.transform_keys(&:to_s).transform_values(&proc).to_yaml(line_width: -1).each_line { |l| result_string += (l.rstrip + "\n") }

    f = File.open("config/locales/#{locale}.yml", "w")
    f.write(result_string)
    f.close

    puts "Merged missing_translations.yml into #{locale}.yml"
  end

  f = File.open("config/missing_translations.yml", "w")
  f.close
else
  puts "No missing translations"
end
